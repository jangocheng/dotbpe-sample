// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: math.proto

#region Designer generated code

using DotBPE.Protocol.Amp;
using DotBPE.Rpc;
using Google.Protobuf;
using System.Threading.Tasks;

namespace MathCommon
{
    //start for class AbstractMath
    public abstract class MathBase : ServiceActor
    {
        protected override int ServiceId => 10005;


        public override Task<AmpMessage> ProcessAsync(AmpMessage req)
        {
            switch (req.MessageId)
            {

                //方法 Math.Add
                case 1: return this.ProcessAddAsync(req);

                default: return base.ProcessNotFoundAsync(req);
            }
        }



        //调用委托
        private async Task<AmpMessage> ProcessAddAsync(AmpMessage req)
        {
            AddReq request = null;

            if (req.Data == null)
            {
                request = new AddReq();
            }
            else
            {
                request = AddReq.Parser.ParseFrom(req.Data);
            }

            req.FriendlyServiceName = "Math.Add";

            var result = await AddAsync(request);
            var response = AmpMessage.CreateResponseMessage(req.ServiceId, req.MessageId);

            response.FriendlyServiceName = "Math.Add";
            response.Code = result.Code;
            if (result.Data != null)
            {
                response.Data = result.Data.ToByteArray();
            }
            return response;
        }
        //抽象方法
        public abstract Task<RpcResult<AddRes>> AddAsync( AddReq req);

    }

    //end for class AbstractMath
}

#endregion Designer generated code