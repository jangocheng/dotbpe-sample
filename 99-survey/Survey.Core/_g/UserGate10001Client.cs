// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service/gate/user_gate_10001.proto
#region Designer generated code

using System; 
using System.Threading.Tasks; 
using DotBPE.Rpc; 
using DotBPE.Protocol.Amp; 
using DotBPE.Rpc.Exceptions; 
using Google.Protobuf; 

namespace Survey.Core {

//start for class UserGateServiceClient
   public sealed class UserGateServiceClient : AmpInvokeClient 
    {
        public UserGateServiceClient(IRpcClient<AmpMessage> client) : base(client)
        {
        }
        public UserGateServiceClient(string remoteAddress) : base(remoteAddress)
        {
        }
        public async Task<RpcResult<RegisterRsp>> RegisterAsync(RegisterReq request,int timeOut=3000)
        {
            AmpMessage message = AmpMessage.CreateRequestMessage(10001, 31);
            message.Data = request.ToByteArray();
            var response = await base.CallInvoker.AsyncCall(message,timeOut);
            if (response == null)
            {
                throw new RpcException("error,response is null !");
            }
            var result = new RpcResult<RegisterRsp>();
            if (response.Code != 0)
            {
                result.Code = response.Code;
            }
            else if (response.Data == null)
            {
                result.Code = ErrorCodes.CODE_INTERNAL_ERROR;
            }
            else
            {
                result.Data = RegisterRsp.Parser.ParseFrom(response.Data);
            }
            return result;
        }

        //同步方法
        public RpcResult<RegisterRsp> Register(RegisterReq request)
        {
            AmpMessage message = AmpMessage.CreateRequestMessage(10001, 31);
            message.Data = request.ToByteArray();
            var response =  base.CallInvoker.BlockingCall(message);
            if (response == null)
            {
                throw new RpcException("error,response is null !");
            }
            var result = new RpcResult<RegisterRsp>();
            if (response.Code != 0)
            {
                result.Code = response.Code;
            }
            else if (response.Data == null)
            {
                result.Code = ErrorCodes.CODE_INTERNAL_ERROR;
            }
            else
            {
                result.Data = RegisterRsp.Parser.ParseFrom(response.Data);
            }
            return result;
         }
        public async Task<RpcResult<LoginRsp>> LoginAsync(LoginReq request,int timeOut=3000)
        {
            AmpMessage message = AmpMessage.CreateRequestMessage(10001, 32);
            message.Data = request.ToByteArray();
            var response = await base.CallInvoker.AsyncCall(message,timeOut);
            if (response == null)
            {
                throw new RpcException("error,response is null !");
            }
            var result = new RpcResult<LoginRsp>();
            if (response.Code != 0)
            {
                result.Code = response.Code;
            }
            else if (response.Data == null)
            {
                result.Code = ErrorCodes.CODE_INTERNAL_ERROR;
            }
            else
            {
                result.Data = LoginRsp.Parser.ParseFrom(response.Data);
            }
            return result;
        }

        //同步方法
        public RpcResult<LoginRsp> Login(LoginReq request)
        {
            AmpMessage message = AmpMessage.CreateRequestMessage(10001, 32);
            message.Data = request.ToByteArray();
            var response =  base.CallInvoker.BlockingCall(message);
            if (response == null)
            {
                throw new RpcException("error,response is null !");
            }
            var result = new RpcResult<LoginRsp>();
            if (response.Code != 0)
            {
                result.Code = response.Code;
            }
            else if (response.Data == null)
            {
                result.Code = ErrorCodes.CODE_INTERNAL_ERROR;
            }
            else
            {
                result.Data = LoginRsp.Parser.ParseFrom(response.Data);
            }
            return result;
         }
        public async Task<RpcResult<EditUserRsp>> EditUserAsync(EditUserReq request,int timeOut=3000)
        {
            AmpMessage message = AmpMessage.CreateRequestMessage(10001, 33);
            message.Data = request.ToByteArray();
            var response = await base.CallInvoker.AsyncCall(message,timeOut);
            if (response == null)
            {
                throw new RpcException("error,response is null !");
            }
            var result = new RpcResult<EditUserRsp>();
            if (response.Code != 0)
            {
                result.Code = response.Code;
            }
            else if (response.Data == null)
            {
                result.Code = ErrorCodes.CODE_INTERNAL_ERROR;
            }
            else
            {
                result.Data = EditUserRsp.Parser.ParseFrom(response.Data);
            }
            return result;
        }

        //同步方法
        public RpcResult<EditUserRsp> EditUser(EditUserReq request)
        {
            AmpMessage message = AmpMessage.CreateRequestMessage(10001, 33);
            message.Data = request.ToByteArray();
            var response =  base.CallInvoker.BlockingCall(message);
            if (response == null)
            {
                throw new RpcException("error,response is null !");
            }
            var result = new RpcResult<EditUserRsp>();
            if (response.Code != 0)
            {
                result.Code = response.Code;
            }
            else if (response.Data == null)
            {
                result.Code = ErrorCodes.CODE_INTERNAL_ERROR;
            }
            else
            {
                result.Data = EditUserRsp.Parser.ParseFrom(response.Data);
            }
            return result;
         }
        public async Task<RpcResult<GetUserRsp>> CheckLoginAsync(CheckLoginReq request,int timeOut=3000)
        {
            AmpMessage message = AmpMessage.CreateRequestMessage(10001, 34);
            message.Data = request.ToByteArray();
            var response = await base.CallInvoker.AsyncCall(message,timeOut);
            if (response == null)
            {
                throw new RpcException("error,response is null !");
            }
            var result = new RpcResult<GetUserRsp>();
            if (response.Code != 0)
            {
                result.Code = response.Code;
            }
            else if (response.Data == null)
            {
                result.Code = ErrorCodes.CODE_INTERNAL_ERROR;
            }
            else
            {
                result.Data = GetUserRsp.Parser.ParseFrom(response.Data);
            }
            return result;
        }

        //同步方法
        public RpcResult<GetUserRsp> CheckLogin(CheckLoginReq request)
        {
            AmpMessage message = AmpMessage.CreateRequestMessage(10001, 34);
            message.Data = request.ToByteArray();
            var response =  base.CallInvoker.BlockingCall(message);
            if (response == null)
            {
                throw new RpcException("error,response is null !");
            }
            var result = new RpcResult<GetUserRsp>();
            if (response.Code != 0)
            {
                result.Code = response.Code;
            }
            else if (response.Data == null)
            {
                result.Code = ErrorCodes.CODE_INTERNAL_ERROR;
            }
            else
            {
                result.Data = GetUserRsp.Parser.ParseFrom(response.Data);
            }
            return result;
         }
     }
//end for class UserGateServiceClient
}
#endregion
