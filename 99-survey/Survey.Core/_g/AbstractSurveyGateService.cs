// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service/gate/survey_gate_10000.proto

#region Designer generated code

using DotBPE.Protocol.Amp;
using DotBPE.Rpc;
using Google.Protobuf;
using System.Threading.Tasks;

namespace Survey.Core
{
    //start for class AbstractSurveyGateService
    public abstract class SurveyGateServiceBase : ServiceActor
    {
        protected override int ServiceId => 10000;


        public override Task<AmpMessage> ProcessAsync(AmpMessage req)
        {
            switch (req.MessageId)
            {

                //方法 SurveyGateService.SaveQPaper
                case 11: return this.ProcessSaveQPaperAsync(req);

                //方法 SurveyGateService.QueryQPaperList
                case 12: return this.ProcessQueryQPaperListAsync(req);

                //方法 SurveyGateService.GetQPaper
                case 13: return this.ProcessGetQPaperAsync(req);

                //方法 SurveyGateService.GetQPaperFull
                case 14: return this.ProcessGetQPaperFullAsync(req);

                //方法 SurveyGateService.SaveAPaper
                case 21: return this.ProcessSaveAPaperAsync(req);

                //方法 SurveyGateService.QueryAPaperList
                case 22: return this.ProcessQueryAPaperListAsync(req);

                //方法 SurveyGateService.GetAPaper
                case 23: return this.ProcessGetAPaperAsync(req);

                //方法 SurveyGateService.GetAPaperSta
                case 24: return this.ProcessGetAPaperStaAsync(req);

                default: return base.ProcessNotFoundAsync(req);
            }
        }



        //调用委托
        private async Task<AmpMessage> ProcessSaveQPaperAsync(AmpMessage req)
        {
            SaveQPaperReq request = null;

            if (req.Data == null)
            {
                request = new SaveQPaperReq();
            }
            else
            {
                request = SaveQPaperReq.Parser.ParseFrom(req.Data);
            }

            req.FriendlyServiceName = "SurveyGateService.SaveQPaper";

            var result = await SaveQPaperAsync(request);
            var response = AmpMessage.CreateResponseMessage(req.ServiceId, req.MessageId);

            response.FriendlyServiceName = "SurveyGateService.SaveQPaper";
            response.Code = result.Code;
            if (result.Data != null)
            {
                response.Data = result.Data.ToByteArray();
            }
            return response;
        }
        //抽象方法
        public abstract Task<RpcResult<SaveQPaperRsp>> SaveQPaperAsync( SaveQPaperReq req);

        //调用委托
        private async Task<AmpMessage> ProcessQueryQPaperListAsync(AmpMessage req)
        {
            QueryQPaperReq request = null;

            if (req.Data == null)
            {
                request = new QueryQPaperReq();
            }
            else
            {
                request = QueryQPaperReq.Parser.ParseFrom(req.Data);
            }

            req.FriendlyServiceName = "SurveyGateService.QueryQPaperList";

            var result = await QueryQPaperListAsync(request);
            var response = AmpMessage.CreateResponseMessage(req.ServiceId, req.MessageId);

            response.FriendlyServiceName = "SurveyGateService.QueryQPaperList";
            response.Code = result.Code;
            if (result.Data != null)
            {
                response.Data = result.Data.ToByteArray();
            }
            return response;
        }
        //抽象方法
        public abstract Task<RpcResult<QPaperListRsp>> QueryQPaperListAsync( QueryQPaperReq req);

        //调用委托
        private async Task<AmpMessage> ProcessGetQPaperAsync(AmpMessage req)
        {
            GetQPaperReq request = null;

            if (req.Data == null)
            {
                request = new GetQPaperReq();
            }
            else
            {
                request = GetQPaperReq.Parser.ParseFrom(req.Data);
            }

            req.FriendlyServiceName = "SurveyGateService.GetQPaper";

            var result = await GetQPaperAsync(request);
            var response = AmpMessage.CreateResponseMessage(req.ServiceId, req.MessageId);

            response.FriendlyServiceName = "SurveyGateService.GetQPaper";
            response.Code = result.Code;
            if (result.Data != null)
            {
                response.Data = result.Data.ToByteArray();
            }
            return response;
        }
        //抽象方法
        public abstract Task<RpcResult<QPaperRsp>> GetQPaperAsync( GetQPaperReq req);

        //调用委托
        private async Task<AmpMessage> ProcessGetQPaperFullAsync(AmpMessage req)
        {
            GetQPaperReq request = null;

            if (req.Data == null)
            {
                request = new GetQPaperReq();
            }
            else
            {
                request = GetQPaperReq.Parser.ParseFrom(req.Data);
            }

            req.FriendlyServiceName = "SurveyGateService.GetQPaperFull";

            var result = await GetQPaperFullAsync(request);
            var response = AmpMessage.CreateResponseMessage(req.ServiceId, req.MessageId);

            response.FriendlyServiceName = "SurveyGateService.GetQPaperFull";
            response.Code = result.Code;
            if (result.Data != null)
            {
                response.Data = result.Data.ToByteArray();
            }
            return response;
        }
        //抽象方法
        public abstract Task<RpcResult<QPaperFullRsp>> GetQPaperFullAsync( GetQPaperReq req);

        //调用委托
        private async Task<AmpMessage> ProcessSaveAPaperAsync(AmpMessage req)
        {
            SaveAPaperReq request = null;

            if (req.Data == null)
            {
                request = new SaveAPaperReq();
            }
            else
            {
                request = SaveAPaperReq.Parser.ParseFrom(req.Data);
            }

            req.FriendlyServiceName = "SurveyGateService.SaveAPaper";

            var result = await SaveAPaperAsync(request);
            var response = AmpMessage.CreateResponseMessage(req.ServiceId, req.MessageId);

            response.FriendlyServiceName = "SurveyGateService.SaveAPaper";
            response.Code = result.Code;
            if (result.Data != null)
            {
                response.Data = result.Data.ToByteArray();
            }
            return response;
        }
        //抽象方法
        public abstract Task<RpcResult<SaveAPaperRsp>> SaveAPaperAsync( SaveAPaperReq req);

        //调用委托
        private async Task<AmpMessage> ProcessQueryAPaperListAsync(AmpMessage req)
        {
            QueryAPaperReq request = null;

            if (req.Data == null)
            {
                request = new QueryAPaperReq();
            }
            else
            {
                request = QueryAPaperReq.Parser.ParseFrom(req.Data);
            }

            req.FriendlyServiceName = "SurveyGateService.QueryAPaperList";

            var result = await QueryAPaperListAsync(request);
            var response = AmpMessage.CreateResponseMessage(req.ServiceId, req.MessageId);

            response.FriendlyServiceName = "SurveyGateService.QueryAPaperList";
            response.Code = result.Code;
            if (result.Data != null)
            {
                response.Data = result.Data.ToByteArray();
            }
            return response;
        }
        //抽象方法
        public abstract Task<RpcResult<APaperListRsp>> QueryAPaperListAsync( QueryAPaperReq req);

        //调用委托
        private async Task<AmpMessage> ProcessGetAPaperAsync(AmpMessage req)
        {
            GetAPaperReq request = null;

            if (req.Data == null)
            {
                request = new GetAPaperReq();
            }
            else
            {
                request = GetAPaperReq.Parser.ParseFrom(req.Data);
            }

            req.FriendlyServiceName = "SurveyGateService.GetAPaper";

            var result = await GetAPaperAsync(request);
            var response = AmpMessage.CreateResponseMessage(req.ServiceId, req.MessageId);

            response.FriendlyServiceName = "SurveyGateService.GetAPaper";
            response.Code = result.Code;
            if (result.Data != null)
            {
                response.Data = result.Data.ToByteArray();
            }
            return response;
        }
        //抽象方法
        public abstract Task<RpcResult<APaperRsp>> GetAPaperAsync( GetAPaperReq req);

        //调用委托
        private async Task<AmpMessage> ProcessGetAPaperStaAsync(AmpMessage req)
        {
            GetQPaperStaReq request = null;

            if (req.Data == null)
            {
                request = new GetQPaperStaReq();
            }
            else
            {
                request = GetQPaperStaReq.Parser.ParseFrom(req.Data);
            }

            req.FriendlyServiceName = "SurveyGateService.GetAPaperSta";

            var result = await GetAPaperStaAsync(request);
            var response = AmpMessage.CreateResponseMessage(req.ServiceId, req.MessageId);

            response.FriendlyServiceName = "SurveyGateService.GetAPaperSta";
            response.Code = result.Code;
            if (result.Data != null)
            {
                response.Data = result.Data.ToByteArray();
            }
            return response;
        }
        //抽象方法
        public abstract Task<RpcResult<QPaperStaRsp>> GetAPaperStaAsync( GetQPaperStaReq req);

    }

    //end for class AbstractSurveyGateService
}

#endregion Designer generated code