// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service/gate/user_gate_10001.proto

#region Designer generated code

using DotBPE.Protocol.Amp;
using DotBPE.Rpc;
using Google.Protobuf;
using System.Threading.Tasks;

namespace Survey.Core
{
    //start for class AbstractUserGateService
    public abstract class UserGateServiceBase : ServiceActor
    {
        protected override int ServiceId => 10001;


        public override Task<AmpMessage> ProcessAsync(AmpMessage req)
        {
            switch (req.MessageId)
            {

                //方法 UserGateService.Register
                case 31: return this.ProcessRegisterAsync(req);

                //方法 UserGateService.Login
                case 32: return this.ProcessLoginAsync(req);

                //方法 UserGateService.EditUser
                case 33: return this.ProcessEditUserAsync(req);

                //方法 UserGateService.CheckLogin
                case 34: return this.ProcessCheckLoginAsync(req);

                default: return base.ProcessNotFoundAsync(req);
            }
        }



        //调用委托
        private async Task<AmpMessage> ProcessRegisterAsync(AmpMessage req)
        {
            RegisterReq request = null;

            if (req.Data == null)
            {
                request = new RegisterReq();
            }
            else
            {
                request = RegisterReq.Parser.ParseFrom(req.Data);
            }

            req.FriendlyServiceName = "UserGateService.Register";

            var result = await RegisterAsync(request);
            var response = AmpMessage.CreateResponseMessage(req.ServiceId, req.MessageId);

            response.FriendlyServiceName = "UserGateService.Register";
            response.Code = result.Code;
            if (result.Data != null)
            {
                response.Data = result.Data.ToByteArray();
            }
            return response;
        }
        //抽象方法
        public abstract Task<RpcResult<RegisterRsp>> RegisterAsync( RegisterReq req);

        //调用委托
        private async Task<AmpMessage> ProcessLoginAsync(AmpMessage req)
        {
            LoginReq request = null;

            if (req.Data == null)
            {
                request = new LoginReq();
            }
            else
            {
                request = LoginReq.Parser.ParseFrom(req.Data);
            }

            req.FriendlyServiceName = "UserGateService.Login";

            var result = await LoginAsync(request);
            var response = AmpMessage.CreateResponseMessage(req.ServiceId, req.MessageId);

            response.FriendlyServiceName = "UserGateService.Login";
            response.Code = result.Code;
            if (result.Data != null)
            {
                response.Data = result.Data.ToByteArray();
            }
            return response;
        }
        //抽象方法
        public abstract Task<RpcResult<LoginRsp>> LoginAsync( LoginReq req);

        //调用委托
        private async Task<AmpMessage> ProcessEditUserAsync(AmpMessage req)
        {
            EditUserReq request = null;

            if (req.Data == null)
            {
                request = new EditUserReq();
            }
            else
            {
                request = EditUserReq.Parser.ParseFrom(req.Data);
            }

            req.FriendlyServiceName = "UserGateService.EditUser";

            var result = await EditUserAsync(request);
            var response = AmpMessage.CreateResponseMessage(req.ServiceId, req.MessageId);

            response.FriendlyServiceName = "UserGateService.EditUser";
            response.Code = result.Code;
            if (result.Data != null)
            {
                response.Data = result.Data.ToByteArray();
            }
            return response;
        }
        //抽象方法
        public abstract Task<RpcResult<EditUserRsp>> EditUserAsync( EditUserReq req);

        //调用委托
        private async Task<AmpMessage> ProcessCheckLoginAsync(AmpMessage req)
        {
            CheckLoginReq request = null;

            if (req.Data == null)
            {
                request = new CheckLoginReq();
            }
            else
            {
                request = CheckLoginReq.Parser.ParseFrom(req.Data);
            }

            req.FriendlyServiceName = "UserGateService.CheckLogin";

            var result = await CheckLoginAsync(request);
            var response = AmpMessage.CreateResponseMessage(req.ServiceId, req.MessageId);

            response.FriendlyServiceName = "UserGateService.CheckLogin";
            response.Code = result.Code;
            if (result.Data != null)
            {
                response.Data = result.Data.ToByteArray();
            }
            return response;
        }
        //抽象方法
        public abstract Task<RpcResult<GetUserRsp>> CheckLoginAsync( CheckLoginReq req);

    }

    //end for class AbstractUserGateService
}

#endregion Designer generated code