// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service/inner/user_inner_20003.proto

#region Designer generated code

using DotBPE.Protocol.Amp;
using DotBPE.Rpc;
using Google.Protobuf;
using System.Threading.Tasks;

namespace Survey.Core
{
    //start for class AbstractUserInnerService
    public abstract class UserInnerServiceBase : ServiceActor
    {
        protected override int ServiceId => 20003;


        public override Task<AmpMessage> ProcessAsync(AmpMessage req)
        {
            switch (req.MessageId)
            {

                //方法 UserInnerService.Register
                case 1: return this.ProcessRegisterAsync(req);

                //方法 UserInnerService.Login
                case 2: return this.ProcessLoginAsync(req);

                //方法 UserInnerService.Edit
                case 3: return this.ProcessEditAsync(req);

                //方法 UserInnerService.GetUserInfo
                case 4: return this.ProcessGetUserInfoAsync(req);

                default: return base.ProcessNotFoundAsync(req);
            }
        }



        //调用委托
        private async Task<AmpMessage> ProcessRegisterAsync(AmpMessage req)
        {
            RegisterReq request = null;

            if (req.Data == null)
            {
                request = new RegisterReq();
            }
            else
            {
                request = RegisterReq.Parser.ParseFrom(req.Data);
            }

            req.FriendlyServiceName = "UserInnerService.Register";

            var result = await RegisterAsync(request);
            var response = AmpMessage.CreateResponseMessage(req.ServiceId, req.MessageId);

            response.FriendlyServiceName = "UserInnerService.Register";
            response.Code = result.Code;
            if (result.Data != null)
            {
                response.Data = result.Data.ToByteArray();
            }
            return response;
        }
        //抽象方法
        public abstract Task<RpcResult<RegisterRsp>> RegisterAsync( RegisterReq req);

        //调用委托
        private async Task<AmpMessage> ProcessLoginAsync(AmpMessage req)
        {
            LoginReq request = null;

            if (req.Data == null)
            {
                request = new LoginReq();
            }
            else
            {
                request = LoginReq.Parser.ParseFrom(req.Data);
            }

            req.FriendlyServiceName = "UserInnerService.Login";

            var result = await LoginAsync(request);
            var response = AmpMessage.CreateResponseMessage(req.ServiceId, req.MessageId);

            response.FriendlyServiceName = "UserInnerService.Login";
            response.Code = result.Code;
            if (result.Data != null)
            {
                response.Data = result.Data.ToByteArray();
            }
            return response;
        }
        //抽象方法
        public abstract Task<RpcResult<LoginRsp>> LoginAsync( LoginReq req);

        //调用委托
        private async Task<AmpMessage> ProcessEditAsync(AmpMessage req)
        {
            EditUserReq request = null;

            if (req.Data == null)
            {
                request = new EditUserReq();
            }
            else
            {
                request = EditUserReq.Parser.ParseFrom(req.Data);
            }

            req.FriendlyServiceName = "UserInnerService.Edit";

            var result = await EditAsync(request);
            var response = AmpMessage.CreateResponseMessage(req.ServiceId, req.MessageId);

            response.FriendlyServiceName = "UserInnerService.Edit";
            response.Code = result.Code;
            if (result.Data != null)
            {
                response.Data = result.Data.ToByteArray();
            }
            return response;
        }
        //抽象方法
        public abstract Task<RpcResult<EditUserRsp>> EditAsync( EditUserReq req);

        //调用委托
        private async Task<AmpMessage> ProcessGetUserInfoAsync(AmpMessage req)
        {
            GetUserReq request = null;

            if (req.Data == null)
            {
                request = new GetUserReq();
            }
            else
            {
                request = GetUserReq.Parser.ParseFrom(req.Data);
            }

            req.FriendlyServiceName = "UserInnerService.GetUserInfo";

            var result = await GetUserInfoAsync(request);
            var response = AmpMessage.CreateResponseMessage(req.ServiceId, req.MessageId);

            response.FriendlyServiceName = "UserInnerService.GetUserInfo";
            response.Code = result.Code;
            if (result.Data != null)
            {
                response.Data = result.Data.ToByteArray();
            }
            return response;
        }
        //抽象方法
        public abstract Task<RpcResult<GetUserRsp>> GetUserInfoAsync( GetUserReq req);

    }

    //end for class AbstractUserInnerService
}

#endregion Designer generated code